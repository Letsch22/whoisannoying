<!DOCTYPE html>
<html>
<head>
  <% include ../partials/header.ejs %>
</head>

<body>

  <% include ../partials/nav.ejs %>

<script>
  // This is called with the results from from FB.getLoginStatus().
  function statusChangeCallback(response) {
    console.log('statusChangeCallback');
    console.log(response);
    // The response object is returned with a status field that lets the
    // app know the current login status of the person.
    // Full docs on the response object can be found in the documentation
    // for FB.getLoginStatus().
    if (response.status === 'connected') {
      // Logged into your app and Facebook.
      testAPI();
    } else {
      console.log('log in to continue');
      window.location.replace('/')
    }
  }

  // This function is called when someone finishes with the Login
  // Button.  See the onlogin handler attached to it in the sample
  // code below.
  function checkLoginState() {
    FB.getLoginStatus(function(response) {
      statusChangeCallback(response);
    });
  }

  window.fbAsyncInit = function() {
  FB.init({
    appId      : '860386630696520',
    cookie     : true,  // enable cookies to allow the server to access 
                        // the session
    xfbml      : true,  // parse social plugins on this page
    version    : 'v2.2' // use version 2.2
  });

  // Now that we've initialized the JavaScript SDK, we call 
  // FB.getLoginStatus().  This function gets the state of the
  // person visiting this page and can return one of three states to
  // the callback you provide.  They can be:
  //
  // 1. Logged into your app ('connected')
  // 2. Logged into Facebook, but not your app ('not_authorized')
  // 3. Not logged into Facebook and can't tell if they are logged into
  //    your app or not.
  //
  // These three cases are handled in the callback function.

  FB.getLoginStatus(function(response) {
    statusChangeCallback(response);
  });



  };

  $(window).load(function(){
        $('#myModal').modal('show');
    });

  // Load the SDK asynchronously
  (function(d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) return;
    js = d.createElement(s); js.id = id;
    js.src = "//connect.facebook.net/en_US/sdk.js";
    fjs.parentNode.insertBefore(js, fjs);
  }(document, 'script', 'facebook-jssdk'));


  // Here we run a very simple test of the Graph API after login is
  // successful.  See statusChangeCallback() for when this call is made.
  function testAPI() {
    console.log('Welcome!  Fetching your information.... ');
    FB.api('/me', function(response) {
      console.log('Successful login for: ' + response.name);
    });
  }

  function getGroupID() {
    var groupID = $('#groupid').val();
    console.log('group id is ' + groupID)
  }
</script>

<div class="jumbotron text-center">
  <div class="container">


<div>
  <h1>whoisannoying</h1>
  <p>Now that you've logged in, check out the data below.</p>
</div>
<div id="myModal" class="modal fade" role="dialog">
  <div class="modal-dialog">
  <div class="modal-body">
    <p>Provide the ID of the group you would like data on. This ID is found at the following place in the URL: </p>
    <p><strong>https://www.facebook.com/groups/[GROUP-ID-HERE]/</strong></p>
  </div>
  <div class="modal-footer">
    <div class="form-group">
      <label for="groupid">Group ID:</label>
      <input type="text" class="form-control" id="groupid">
      <button type="submit" class="btn btn-default" data-dismiss="modal" onclick="getGroupID()">Submit</button>
    </div>
  </div>
    <!-- 
    TODO: use FB.getLoginStatus to test whether or not to show the login button
    TODO: FB.api will automatically add the access token to the call
    TODO: add permissions for necessary things (groups you belong to, etc)
    TODO: get list of user groups with https://developers.facebook.com/docs/graph-api/reference/user/groups/
    TODO: make list of user groups in readable HTML format with https://developers.facebook.com/docs/graph-api/reference/v2.4/group
    TODO: grab group post feed with https://developers.facebook.com/docs/graph-api/reference/v2.4/group/feed
    TODO: use from field in each post to determine author of post https://developers.facebook.com/docs/graph-api/reference/v2.4/post
    TODO: count up all the user id's posts and graph results in readable format using https://developers.facebook.com/docs/graph-api/reference/user
    -->
</div>
</div>


</body>
</html>
